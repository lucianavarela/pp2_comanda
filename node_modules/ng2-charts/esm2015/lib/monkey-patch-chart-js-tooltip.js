/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:variable-name
// tslint:disable:no-var-keyword
// tslint:disable:prefer-const
// tslint:disable:only-arrow-functions
// tslint:disable:one-variable-per-declaration
// tslint:disable:object-literal-shorthand
// tslint:disable:space-before-function-paren
/** @type {?} */
const helpers = Chart.helpers;
/**
 * @param {?} vm
 * @param {?} align
 * @return {?}
 */
function getAlignedX(vm, align) {
    return align === 'center'
        ? vm.x + vm.width / 2
        : align === 'right'
            ? vm.x + vm.width - vm.xPadding
            : vm.x + vm.xPadding;
}
/**
 * @param {?} pt
 * @param {?} vm
 * @param {?} ctx
 * @return {?}
 */
function drawBody(pt, vm, ctx) {
    /** @type {?} */
    var bodyFontSize = vm.bodyFontSize;
    /** @type {?} */
    var bodySpacing = vm.bodySpacing;
    /** @type {?} */
    var bodyAlign = vm._bodyAlign;
    /** @type {?} */
    var body = vm.body;
    /** @type {?} */
    var drawColorBoxes = vm.displayColors;
    /** @type {?} */
    var labelColors = vm.labelColors;
    /** @type {?} */
    var xLinePadding = 0;
    /** @type {?} */
    var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;
    /** @type {?} */
    var textColor;
    ctx.textAlign = bodyAlign;
    ctx.textBaseline = 'top';
    ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
    pt.x = getAlignedX(vm, bodyAlign);
    // Before Body
    /** @type {?} */
    var fillLineOfText = (/**
     * @param {?} line
     * @return {?}
     */
    function (line) {
        ctx.fillText(line, pt.x + xLinePadding, pt.y);
        pt.y += bodyFontSize + bodySpacing;
    });
    // Before body lines
    ctx.fillStyle = vm.bodyFontColor;
    helpers.each(vm.beforeBody, fillLineOfText);
    xLinePadding = drawColorBoxes && bodyAlign !== 'right'
        ? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)
        : 0;
    // Draw body lines now
    helpers.each(body, (/**
     * @param {?} bodyItem
     * @param {?} i
     * @return {?}
     */
    function (bodyItem, i) {
        textColor = vm.labelTextColors[i];
        ctx.fillStyle = textColor;
        helpers.each(bodyItem.before, fillLineOfText);
        // Draw Legend-like boxes if needed
        if (drawColorBoxes) {
            // Fill a white rect so that colours merge nicely if the opacity is < 1
            ctx.fillStyle = vm.legendColorBackground;
            ctx.fillRect(colorX, pt.y, bodyFontSize, bodyFontSize);
            // Border
            ctx.lineWidth = 1;
            ctx.strokeStyle = labelColors[i].borderColor;
            ctx.strokeRect(colorX, pt.y, bodyFontSize, bodyFontSize);
            // Inner square
            ctx.fillStyle = labelColors[i].backgroundColor;
            ctx.fillRect(colorX + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
            ctx.fillStyle = textColor;
        }
        helpers.each(bodyItem.lines, fillLineOfText);
        helpers.each(bodyItem.after, fillLineOfText);
    }));
    // Reset back to 0 for after body
    xLinePadding = 0;
    // After body lines
    helpers.each(vm.afterBody, fillLineOfText);
    pt.y -= bodySpacing; // Remove last body spacing
}
/**
 * @return {?}
 */
export function monkeyPatchChartJsTooltip() {
    Chart.Tooltip.prototype.drawBody = drawBody;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ua2V5LXBhdGNoLWNoYXJ0LWpzLXRvb2x0aXAuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzItY2hhcnRzLyIsInNvdXJjZXMiOlsibGliL21vbmtleS1wYXRjaC1jaGFydC1qcy10b29sdGlwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztNQWdCTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU87Ozs7OztBQUU3QixTQUFTLFdBQVcsQ0FBQyxFQUFFLEVBQUUsS0FBSztJQUM1QixPQUFPLEtBQUssS0FBSyxRQUFRO1FBQ3ZCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQztRQUNyQixDQUFDLENBQUMsS0FBSyxLQUFLLE9BQU87WUFDakIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsUUFBUTtZQUMvQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDO0FBQzNCLENBQUM7Ozs7Ozs7QUFFRCxTQUFTLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUc7O1FBQ3ZCLFlBQVksR0FBRyxFQUFFLENBQUMsWUFBWTs7UUFDOUIsV0FBVyxHQUFHLEVBQUUsQ0FBQyxXQUFXOztRQUM1QixTQUFTLEdBQUcsRUFBRSxDQUFDLFVBQVU7O1FBQ3pCLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSTs7UUFDZCxjQUFjLEdBQUcsRUFBRSxDQUFDLGFBQWE7O1FBQ2pDLFdBQVcsR0FBRyxFQUFFLENBQUMsV0FBVzs7UUFDNUIsWUFBWSxHQUFHLENBQUM7O1FBQ2hCLE1BQU0sR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7O1FBQ3JELFNBQVM7SUFFYixHQUFHLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJ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LDJCQUEyQjtBQUNsRCxDQUFDOzs7O0FBRUQsTUFBTSxVQUFVLHlCQUF5QjtJQUN2QyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0FBQzlDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lXHJcbi8vIHRzbGludDpkaXNhYmxlOm5vLXZhci1rZXl3b3JkXHJcbi8vIHRzbGludDpkaXNhYmxlOnByZWZlci1jb25zdFxyXG4vLyB0c2xpbnQ6ZGlzYWJsZTpvbmx5LWFycm93LWZ1bmN0aW9uc1xyXG4vLyB0c2xpbnQ6ZGlzYWJsZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXHJcbi8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNob3J0aGFuZFxyXG4vLyB0c2xpbnQ6ZGlzYWJsZTpzcGFjZS1iZWZvcmUtZnVuY3Rpb24tcGFyZW5cclxuXHJcbmRlY2xhcmUgY2xhc3MgQ2hhcnQge1xyXG4gIHN0YXRpYyByZWFkb25seSBDaGFydDogdHlwZW9mIENoYXJ0O1xyXG4gIHN0YXRpYyByZWFkb25seSBUb29sdGlwOiBhbnk7XHJcbiAgc3RhdGljIHJlYWRvbmx5IGhlbHBlcnM6IGFueTtcclxuICBzdGF0aWMgcmVhZG9ubHkgZGVmYXVsdHM6IGFueTtcclxuICBzdGF0aWMgcmVhZG9ubHkgcGx1Z2luczogYW55O1xyXG59XHJcblxyXG5jb25zdCBoZWxwZXJzID0gQ2hhcnQuaGVscGVycztcclxuXHJcbmZ1bmN0aW9uIGdldEFsaWduZWRYKHZtLCBhbGlnbikge1xyXG4gIHJldHVybiBhbGlnbiA9PT0gJ2NlbnRlcidcclxuICAgID8gdm0ueCArIHZtLndpZHRoIC8gMlxyXG4gICAgOiBhbGlnbiA9PT0gJ3JpZ2h0J1xyXG4gICAgICA/IHZtLnggKyB2bS53aWR0aCAtIHZtLnhQYWRkaW5nXHJcbiAgICAgIDogdm0ueCArIHZtLnhQYWRkaW5nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3Qm9keShwdCwgdm0sIGN0eCkge1xyXG4gIHZhciBib2R5Rm9udFNpemUgPSB2bS5ib2R5Rm9udFNpemU7XHJcbiAgdmFyIGJvZHlTcGFjaW5nID0gdm0uYm9keVNwYWNpbmc7XHJcbiAgdmFyIGJvZHlBbGlnbiA9IHZtLl9ib2R5QWxpZ247XHJcbiAgdmFyIGJvZHkgPSB2bS5ib2R5O1xyXG4gIHZhciBkcmF3Q29sb3JCb3hlcyA9IHZtLmRpc3BsYXlDb2xvcnM7XHJcbiAgdmFyIGxhYmVsQ29sb3JzID0gdm0ubGFiZWxDb2xvcnM7XHJcbiAgdmFyIHhMaW5lUGFkZGluZyA9IDA7XHJcbiAgdmFyIGNvbG9yWCA9IGRyYXdDb2xvckJveGVzID8gZ2V0QWxpZ25lZFgodm0sICdsZWZ0JykgOiAwO1xyXG4gIHZhciB0ZXh0Q29sb3I7XHJcblxyXG4gIGN0eC50ZXh0QWxpZ24gPSBib2R5QWxpZ247XHJcbiAgY3R4LnRleHRCYXNlbGluZSA9ICd0b3AnO1xyXG4gIGN0eC5mb250ID0gaGVscGVycy5mb250U3RyaW5nKGJvZHlGb250U2l6ZSwgdm0uX2JvZHlGb250U3R5bGUsIHZtLl9ib2R5Rm9udEZhbWlseSk7XHJcblxyXG4gIHB0LnggPSBnZXRBbGlnbmVkWCh2bSwgYm9keUFsaWduKTtcclxuXHJcbiAgLy8gQmVmb3JlIEJvZHlcclxuICB2YXIgZmlsbExpbmVPZlRleHQgPSBmdW5jdGlvbiAobGluZSkge1xyXG4gICAgY3R4LmZpbGxUZXh0KGxpbmUsIHB0LnggKyB4TGluZVBhZGRpbmcsIHB0LnkpO1xyXG4gICAgcHQueSArPSBib2R5Rm9udFNpemUgKyBib2R5U3BhY2luZztcclxuICB9O1xyXG5cclxuICAvLyBCZWZvcmUgYm9keSBsaW5lc1xyXG4gIGN0eC5maWxsU3R5bGUgPSB2bS5ib2R5Rm9udENvbG9yO1xyXG4gIGhlbHBlcnMuZWFjaCh2bS5iZWZvcmVCb2R5LCBmaWxsTGluZU9mVGV4dCk7XHJcblxyXG4gIHhMaW5lUGFkZGluZyA9IGRyYXdDb2xvckJveGVzICYmIGJvZHlBbGlnbiAhPT0gJ3JpZ2h0J1xyXG4gICAgPyBib2R5QWxpZ24gPT09ICdjZW50ZXInID8gKGJvZHlGb250U2l6ZSAvIDIgKyAxKSA6IChib2R5Rm9udFNpemUgKyAyKVxyXG4gICAgOiAwO1xyXG5cclxuICAvLyBEcmF3IGJvZHkgbGluZXMgbm93XHJcbiAgaGVscGVycy5lYWNoKGJvZHksIGZ1bmN0aW9uIChib2R5SXRlbSwgaSkge1xyXG4gICAgdGV4dENvbG9yID0gdm0ubGFiZWxUZXh0Q29sb3JzW2ldO1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9IHRleHRDb2xvcjtcclxuICAgIGhlbHBlcnMuZWFjaChib2R5SXRlbS5iZWZvcmUsIGZpbGxMaW5lT2ZUZXh0KTtcclxuXHJcbiAgICAvLyBEcmF3IExlZ2VuZC1saWtlIGJveGVzIGlmIG5lZWRlZFxyXG4gICAgaWYgKGRyYXdDb2xvckJveGVzKSB7XHJcbiAgICAgIC8vIEZpbGwgYSB3aGl0ZSByZWN0IHNvIHRoYXQgY29sb3VycyBtZXJnZSBuaWNlbHkgaWYgdGhlIG9wYWNpdHkgaXMgPCAxXHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSB2bS5sZWdlbmRDb2xvckJhY2tncm91bmQ7XHJcbiAgICAgIGN0eC5maWxsUmVjdChjb2xvclgsIHB0LnksIGJvZHlGb250U2l6ZSwgYm9keUZvbnRTaXplKTtcclxuXHJcbiAgICAgIC8vIEJvcmRlclxyXG4gICAgICBjdHgubGluZVdpZHRoID0gMTtcclxuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvcnNbaV0uYm9yZGVyQ29sb3I7XHJcbiAgICAgIGN0eC5zdHJva2VSZWN0KGNvbG9yWCwgcHQueSwgYm9keUZvbnRTaXplLCBib2R5Rm9udFNpemUpO1xyXG5cclxuICAgICAgLy8gSW5uZXIgc3F1YXJlXHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9yc1tpXS5iYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgIGN0eC5maWxsUmVjdChjb2xvclggKyAxLCBwdC55ICsgMSwgYm9keUZvbnRTaXplIC0gMiwgYm9keUZvbnRTaXplIC0gMik7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSB0ZXh0Q29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgaGVscGVycy5lYWNoKGJvZHlJdGVtLmxpbmVzLCBmaWxsTGluZU9mVGV4dCk7XHJcblxyXG4gICAgaGVscGVycy5lYWNoKGJvZHlJdGVtLmFmdGVyLCBmaWxsTGluZU9mVGV4dCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIFJlc2V0IGJhY2sgdG8gMCBmb3IgYWZ0ZXIgYm9keVxyXG4gIHhMaW5lUGFkZGluZyA9IDA7XHJcblxyXG4gIC8vIEFmdGVyIGJvZHkgbGluZXNcclxuICBoZWxwZXJzLmVhY2godm0uYWZ0ZXJCb2R5LCBmaWxsTGluZU9mVGV4dCk7XHJcbiAgcHQueSAtPSBib2R5U3BhY2luZzsgLy8gUmVtb3ZlIGxhc3QgYm9keSBzcGFjaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtb25rZXlQYXRjaENoYXJ0SnNUb29sdGlwKCkge1xyXG4gIENoYXJ0LlRvb2x0aXAucHJvdG90eXBlLmRyYXdCb2R5ID0gZHJhd0JvZHk7XHJcbn1cclxuIl19